name: Deploy NestJS Application

# main 브랜치로 push 혹은 pr이 날라와서 merge되면 workflow가 작동합니다.
# workflow_dispatch는 수동으로 workflow를 작동시키도록 할 수 있도록 합니다.
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 해당 workflow가 레포지토리에 접근할 수 있도록 해줍니다.
      # 우리는 레포지토리의 소스를 빌드해야하기 때문에 이 액션을 사용해야합니다.
      - name: Checkout Repository
        uses: actions/checkout@v2.4.2

      # 16.16.0 버전의 NodeJS를 세팅해줍니다.
      - name: Setup Node.js environment
        uses: actions/setup-node@v3.4.1
        with:
          node-version: 16.16.0

      # Dependency들을 설치합니다. yarn도 사용 가능합니다.
      - name: Install Dependencies
        run: npm install

      # NestJS Application을 빌드합니다.
      - name: Build a Nest Application
        run: npm run build
        shell: bash

      # 레포지토리를 압축시킵니다.
      # 다만 불필요한 node_module, coverage, src, test, readme, .git* 등의 파일은 제외시킵니다.
      - name: Make a zip file
        run: zip -r ./$GITHUB_SHA.zip . -x "node_modules/*" "coverage/*" "src/*" "test/*" "README.md" "*.git*"
        shell: bash

      # 위에서 생성한 IAM 사용자 정보를 넣어 자격 증명을 수행합니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build and push image to Amazon ECR
        env:
          REGISTRY: 888577060888.dkr.ecr.us-east-1.amazonaws.com
          REPOSITORY: server-repository
          IMAGE_TAG: latest
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $REGISTRY

          # 2. NestJS Dockerfile이 위치한 디렉터리로 이동 (필요 시)
          #    예) 프로젝트 루트에 Dockerfile이 있다면 아래 cd 명령어 대신 'docker build -f ./Dockerfile .'
          # cd server

          # 3. Docker Build
          #    - Dockerfile에서 NestJS 앱을 빌드 & 실행하도록 작성해두어야 합니다.
          #    - 예: dist 폴더를 COPY 해서 실행 (npm run build는 GitHub Actions 단계에서 이미 수행됨)
          docker build -t $REPOSITORY:$IMAGE_TAG .

          # 4. ECR에 push할 태그 생성
          docker tag $REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:$IMAGE_TAG

          # 5. Docker 이미지를 ECR에 푸시
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      # 위에서 만든 zip 파일을 S3에 업로드 합니다.
      - name: Upload to S3
        run: aws s3 cp --region ${{ secrets.AWS_REGION }} ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip

      # CodeDeploy에게 deployment를 생성하도록 요청합니다.
      - name: Request Deployment
        run: aws deploy create-deployment --application-name $AWS_CODEDEPLOY_APPLICATION_NAME --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name $AWS_CODEDEPLOY_DEPLOYMENT_GROUP_NAME --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip

env:
  S3_BUCKET_NAME: coura-server-bucket # S3 버킷 이름입니다.
  PROJECT_NAME: coura-be # S3 버킷 내 폴더 이름입니다. 임의로 정하면 알아서 생성해줍니다.
  AWS_CODEDEPLOY_APPLICATION_NAME: coura-code-deploy # CodeDeploy 애플리케이션 이름입니다.
  AWS_CODEDEPLOY_DEPLOYMENT_GROUP_NAME: coura-codedeploy-group # CodeDeploy 배포 그룹 이름입니다.
