worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    sendfile on;
    keepalive_timeout 65;

    server {
        listen 80;
        server_name beapiserver.getawarest.com www.beapiserver.getawarest.com;  # 실제 도메인으로 변경

        # Cloudflare가 HTTP 요청을 받고 내부로 전달하므로, SSL 관련 설정은 불필요

        location / {
            proxy_pass http://docker-nest;  # 백엔드 NestJS 서버
            proxy_redirect off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # (아래 CORS 헤더는 Nginx에서 CORS를 추가하기 위한 부분입니다.)
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization, x-refresh-token' always;
        }
        
        # OPTIONS 메서드에 대한 응답 처리 (필요한 경우)
        if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization, x-refresh-token';
            return 204;
        }
    }
}